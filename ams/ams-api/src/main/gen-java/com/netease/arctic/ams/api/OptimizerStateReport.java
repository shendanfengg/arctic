/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netease.arctic.ams.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2023-03-21")
public class OptimizerStateReport implements org.apache.thrift.TBase<OptimizerStateReport, OptimizerStateReport._Fields>, java.io.Serializable, Cloneable, Comparable<OptimizerStateReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OptimizerStateReport");

  private static final org.apache.thrift.protocol.TField OPTIMIZER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("optimizerId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OPTIMIZER_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("optimizerState", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OptimizerStateReportStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OptimizerStateReportTupleSchemeFactory();

  public long optimizerId; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<String, String> optimizerState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPTIMIZER_ID((short)1, "optimizerId"),
    OPTIMIZER_STATE((short)2, "optimizerState");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPTIMIZER_ID
          return OPTIMIZER_ID;
        case 2: // OPTIMIZER_STATE
          return OPTIMIZER_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPTIMIZERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPTIMIZER_ID, new org.apache.thrift.meta_data.FieldMetaData("optimizerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPTIMIZER_STATE, new org.apache.thrift.meta_data.FieldMetaData("optimizerState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OptimizerStateReport.class, metaDataMap);
  }

  public OptimizerStateReport() {
  }

  public OptimizerStateReport(
    long optimizerId,
    java.util.Map<String, String> optimizerState)
  {
    this();
    this.optimizerId = optimizerId;
    setOptimizerIdIsSet(true);
    this.optimizerState = optimizerState;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OptimizerStateReport(OptimizerStateReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.optimizerId = other.optimizerId;
    if (other.isSetOptimizerState()) {
      java.util.Map<String, String> __this__optimizerState = new java.util.HashMap<String, String>(other.optimizerState);
      this.optimizerState = __this__optimizerState;
    }
  }

  public OptimizerStateReport deepCopy() {
    return new OptimizerStateReport(this);
  }

  @Override
  public void clear() {
    setOptimizerIdIsSet(false);
    this.optimizerId = 0;
    this.optimizerState = null;
  }

  public long getOptimizerId() {
    return this.optimizerId;
  }

  public OptimizerStateReport setOptimizerId(long optimizerId) {
    this.optimizerId = optimizerId;
    setOptimizerIdIsSet(true);
    return this;
  }

  public void unsetOptimizerId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPTIMIZERID_ISSET_ID);
  }

  /** Returns true if field optimizerId is set (has been assigned a value) and false otherwise */
  public boolean isSetOptimizerId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPTIMIZERID_ISSET_ID);
  }

  public void setOptimizerIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPTIMIZERID_ISSET_ID, value);
  }

  public int getOptimizerStateSize() {
    return (this.optimizerState == null) ? 0 : this.optimizerState.size();
  }

  public void putToOptimizerState(String key, String val) {
    if (this.optimizerState == null) {
      this.optimizerState = new java.util.HashMap<String, String>();
    }
    this.optimizerState.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<String, String> getOptimizerState() {
    return this.optimizerState;
  }

  public OptimizerStateReport setOptimizerState(@org.apache.thrift.annotation.Nullable java.util.Map<String, String> optimizerState) {
    this.optimizerState = optimizerState;
    return this;
  }

  public void unsetOptimizerState() {
    this.optimizerState = null;
  }

  /** Returns true if field optimizerState is set (has been assigned a value) and false otherwise */
  public boolean isSetOptimizerState() {
    return this.optimizerState != null;
  }

  public void setOptimizerStateIsSet(boolean value) {
    if (!value) {
      this.optimizerState = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case OPTIMIZER_ID:
      if (value == null) {
        unsetOptimizerId();
      } else {
        setOptimizerId((Long)value);
      }
      break;

    case OPTIMIZER_STATE:
      if (value == null) {
        unsetOptimizerState();
      } else {
        setOptimizerState((java.util.Map<String, String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPTIMIZER_ID:
      return getOptimizerId();

    case OPTIMIZER_STATE:
      return getOptimizerState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPTIMIZER_ID:
      return isSetOptimizerId();
    case OPTIMIZER_STATE:
      return isSetOptimizerState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OptimizerStateReport)
      return this.equals((OptimizerStateReport)that);
    return false;
  }

  public boolean equals(OptimizerStateReport that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_optimizerId = true;
    boolean that_present_optimizerId = true;
    if (this_present_optimizerId || that_present_optimizerId) {
      if (!(this_present_optimizerId && that_present_optimizerId))
        return false;
      if (this.optimizerId != that.optimizerId)
        return false;
    }

    boolean this_present_optimizerState = true && this.isSetOptimizerState();
    boolean that_present_optimizerState = true && that.isSetOptimizerState();
    if (this_present_optimizerState || that_present_optimizerState) {
      if (!(this_present_optimizerState && that_present_optimizerState))
        return false;
      if (!this.optimizerState.equals(that.optimizerState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(optimizerId);

    hashCode = hashCode * 8191 + ((isSetOptimizerState()) ? 131071 : 524287);
    if (isSetOptimizerState())
      hashCode = hashCode * 8191 + optimizerState.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OptimizerStateReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOptimizerId()).compareTo(other.isSetOptimizerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptimizerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optimizerId, other.optimizerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptimizerState()).compareTo(other.isSetOptimizerState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptimizerState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optimizerState, other.optimizerState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OptimizerStateReport(");
    boolean first = true;

    sb.append("optimizerId:");
    sb.append(this.optimizerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("optimizerState:");
    if (this.optimizerState == null) {
      sb.append("null");
    } else {
      sb.append(this.optimizerState);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OptimizerStateReportStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptimizerStateReportStandardScheme getScheme() {
      return new OptimizerStateReportStandardScheme();
    }
  }

  private static class OptimizerStateReportStandardScheme extends org.apache.thrift.scheme.StandardScheme<OptimizerStateReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OptimizerStateReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPTIMIZER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.optimizerId = iprot.readI64();
              struct.setOptimizerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPTIMIZER_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                struct.optimizerState = new java.util.HashMap<String, String>(2*_map58.size);
                @org.apache.thrift.annotation.Nullable String _key59;
                @org.apache.thrift.annotation.Nullable String _val60;
                for (int _i61 = 0; _i61 < _map58.size; ++_i61)
                {
                  _key59 = iprot.readString();
                  _val60 = iprot.readString();
                  struct.optimizerState.put(_key59, _val60);
                }
                iprot.readMapEnd();
              }
              struct.setOptimizerStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OptimizerStateReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPTIMIZER_ID_FIELD_DESC);
      oprot.writeI64(struct.optimizerId);
      oprot.writeFieldEnd();
      if (struct.optimizerState != null) {
        oprot.writeFieldBegin(OPTIMIZER_STATE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.optimizerState.size()));
          for (java.util.Map.Entry<String, String> _iter62 : struct.optimizerState.entrySet())
          {
            oprot.writeString(_iter62.getKey());
            oprot.writeString(_iter62.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OptimizerStateReportTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptimizerStateReportTupleScheme getScheme() {
      return new OptimizerStateReportTupleScheme();
    }
  }

  private static class OptimizerStateReportTupleScheme extends org.apache.thrift.scheme.TupleScheme<OptimizerStateReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OptimizerStateReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOptimizerId()) {
        optionals.set(0);
      }
      if (struct.isSetOptimizerState()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOptimizerId()) {
        oprot.writeI64(struct.optimizerId);
      }
      if (struct.isSetOptimizerState()) {
        {
          oprot.writeI32(struct.optimizerState.size());
          for (java.util.Map.Entry<String, String> _iter63 : struct.optimizerState.entrySet())
          {
            oprot.writeString(_iter63.getKey());
            oprot.writeString(_iter63.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OptimizerStateReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.optimizerId = iprot.readI64();
        struct.setOptimizerIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.optimizerState = new java.util.HashMap<String, String>(2*_map64.size);
          @org.apache.thrift.annotation.Nullable String _key65;
          @org.apache.thrift.annotation.Nullable String _val66;
          for (int _i67 = 0; _i67 < _map64.size; ++_i67)
          {
            _key65 = iprot.readString();
            _val66 = iprot.readString();
            struct.optimizerState.put(_key65, _val66);
          }
        }
        struct.setOptimizerStateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

